[{"path":[]},{"path":"https://danielvartan.github.io/lubritime/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://danielvartan.github.io/lubritime/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://danielvartan.github.io/lubritime/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://danielvartan.github.io/lubritime/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official email address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://danielvartan.github.io/lubritime/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement danvartan@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://danielvartan.github.io/lubritime/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://danielvartan.github.io/lubritime/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://danielvartan.github.io/lubritime/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://danielvartan.github.io/lubritime/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://danielvartan.github.io/lubritime/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://danielvartan.github.io/lubritime/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://danielvartan.github.io/lubritime/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to lubritime","title":"Contributing to lubritime","text":"First , thanks considering contributing lubritime! 👍 ’s people like make rewarding us—project maintainers—work lubritime. 😊 lubritime open source project, maintained people care. directly funded .","code":""},{"path":"https://danielvartan.github.io/lubritime/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to lubritime","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://danielvartan.github.io/lubritime/CONTRIBUTING.html","id":"how-you-can-contribute","dir":"","previous_headings":"","what":"How You Can Contribute","title":"Contributing to lubritime","text":"several ways can contribute project. want know contribute open source projects like one, see Open Source Guide.","code":""},{"path":"https://danielvartan.github.io/lubritime/CONTRIBUTING.html","id":"share-the-love-️","dir":"","previous_headings":"How You Can Contribute","what":"Share the Love ❤️","title":"Contributing to lubritime","text":"Think lubritime useful? Help others discover sharing person, social media, blog post. Don’t forget star GitHub repository! Using lubritime paper writing? Consider citing .","code":""},{"path":"https://danielvartan.github.io/lubritime/CONTRIBUTING.html","id":"propose-an-idea-","dir":"","previous_headings":"How You Can Contribute","what":"Propose an Idea 💡","title":"Contributing to lubritime","text":"idea new lubritime feature? Take look documentation issue list see isn’t included suggested yet. , suggest idea issue GitHub. can’t promise implement idea, helps : Explain detail work Keep scope narrow possible See want contribute code idea well.","code":""},{"path":"https://danielvartan.github.io/lubritime/CONTRIBUTING.html","id":"report-a-bug-","dir":"","previous_headings":"How You Can Contribute","what":"Report a Bug 🐛","title":"Contributing to lubritime","text":"Using lubritime discovered bug? ’s annoying! Don’t let others experience report issue GitHub can fix . good bug report makes easier us , please include: content utils::sessionInfo() (Tip: use reprex package) details local setup might helpful troubleshooting Detailed steps reproduce bug","code":""},{"path":"https://danielvartan.github.io/lubritime/CONTRIBUTING.html","id":"improve-the-documentation-","dir":"","previous_headings":"How You Can Contribute","what":"Improve the Documentation 📖","title":"Contributing to lubritime","text":"Noticed typo website? Think function use better example? Good documentation makes difference, help improve welcome!","code":""},{"path":"https://danielvartan.github.io/lubritime/CONTRIBUTING.html","id":"the-website","dir":"","previous_headings":"How You Can Contribute > Improve the Documentation 📖","what":"The Website","title":"Contributing to lubritime","text":"website generated pkgdown. means don’t write html: Content pulled together documentation code, vignettes, Markdown files, package DESCRIPTION _pkgdown.yml settings. know way around pkgdown, can propose file change improve documentation.","code":""},{"path":"https://danielvartan.github.io/lubritime/CONTRIBUTING.html","id":"function-documentation","dir":"","previous_headings":"How You Can Contribute > Improve the Documentation 📖","what":"Function Documentation","title":"Contributing to lubritime","text":"Functions described comments near code translated documentation using roxygen2. want improve function description: Go R directory code repository Look file function Propose file change update function documentation roxygen comments (starting #')","code":""},{"path":"https://danielvartan.github.io/lubritime/CONTRIBUTING.html","id":"contribute-code-","dir":"","previous_headings":"How You Can Contribute","what":"Contribute Code 📝","title":"Contributing to lubritime","text":"Care fix bugs implement new functionality lubritime? Awesome! 👏 look issue list leave comment things want work . See also development guidelines .","code":""},{"path":"https://danielvartan.github.io/lubritime/CONTRIBUTING.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development Guidelines","title":"Contributing to lubritime","text":"try follow GitHub flow development. steps contribute: Fork repository clone computer. learn process, see guide. forked cloned project since worked , pull changes original repo clone using git pull upstream main Open project RStudio IDE choice Write code Test code (Bonus points adding unit tests) Document code (See function documentation ) Check code devtools::check() aim 0 errors, warnings notes Commit push changes Submit pull request Also note project use Tidyverse design principles Tidyverse style guide. code must conform principles rules.","code":""},{"path":"https://danielvartan.github.io/lubritime/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Daniel Vartanian Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://danielvartan.github.io/lubritime/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Vartanian. Author, maintainer, conceptor, copyright holder.","code":""},{"path":"https://danielvartan.github.io/lubritime/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vartanian, D.. (2025). {lubritime}: Extension {lubridate}. R package. https://danielvartan.github.io/lubritime/","code":"@Misc{,   title = {{lubritime}: An Extension for {lubridate}},   author = {Daniel Vartanian},   year = {2025},   url = {https://danielvartan.github.io/lubritime/},   note = {R package}, }"},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"An Extension for lubridate","text":"lubritime extension lubridate package tidyverse, adding new features deal temporal objects. Please note lubritime related way Posit/RStudio lubridate developer team.","code":""},{"path":"https://danielvartan.github.io/lubritime/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An Extension for lubridate","text":"can install lubritime using remotes package:","code":"remotes::install_github(\"danielvartan/lubritime\")"},{"path":"https://danielvartan.github.io/lubritime/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"An Extension for lubridate","text":"lubritime code released MIT license.","code":""},{"path":"https://danielvartan.github.io/lubritime/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"An Extension for lubridate","text":"welcome contributions, including bug reports. Take moment review Guidelines Contributing.  Become lubritime supporter! Click make donation. Please indicate lubritime package donation message.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/assign_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign dates to two sequential hours — assign_date","title":"Assign dates to two sequential hours — assign_date","text":"assign_date() assigns dates two sequential hours, assuming interval start end hour less equal 24 hours. function facilitates time arithmetic placing time values without date reference onto timeline.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/assign_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign dates to two sequential hours — assign_date","text":"","code":"assign_date(start, end, ambiguity = 0)"},{"path":"https://danielvartan.github.io/lubritime/reference/assign_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign dates to two sequential hours — assign_date","text":"start, end hms POSIXt vector indicating start end hour. ambiguity (Optional) numeric NA value instruct assign_date() deal ambiguities. See Details section learn (default: 0).","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/assign_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign dates to two sequential hours — assign_date","text":"Interval object.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/assign_date.html","id":"ambiguity-argument","dir":"Reference","previous_headings":"","what":"ambiguity argument","title":"Assign dates to two sequential hours — assign_date","text":"cases start equal end, two possibilities intervals two hours (ambiguity). start end can point time can distance one day, considering two-day timeline.   must instruct assign_date() deal problem occurs. three options choose. ambiguity = 0: consider interval start end 0 hours, .e., start end located point time (default). ambiguity = 24: consider interval start end 24 hours, .e., start end distance one day. ambiguity = NA: disregard cases, assigning NA value.","code":"start,end       start,end       start,end       start,end    start            end            start            end    10:00           10:00           10:00           10:00 -----|---------------|---------------|---------------|----->     0h              0h              0h              0h             24h             24h             24h"},{"path":"https://danielvartan.github.io/lubritime/reference/assign_date.html","id":"base-date-and-timezone","dir":"Reference","previous_headings":"","what":"Base date and timezone","title":"Assign dates to two sequential hours — assign_date","text":"assign_date() uses Unix epoch (1970-01-01) date start date creating intervals. output always \"UTC\" set timezone. Learn time zones ?timezone.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/assign_date.html","id":"posixt-objects","dir":"Reference","previous_headings":"","what":"POSIXt objects","title":"Assign dates to two sequential hours — assign_date","text":"POSIXt objects passed argument start end stripped dates. time considered. POSIXct POSIXlt objects inherits class POSIXt. Learn ?DateTimeClasses.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/assign_date.html","id":"na-values","dir":"Reference","previous_headings":"","what":"NA values","title":"Assign dates to two sequential hours — assign_date","text":"assign_date() return Interval NA-NA start end NA.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/assign_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign dates to two sequential hours — assign_date","text":"","code":"## Scalar example  start <- hms::parse_hms(\"23:11:00\") end <- hms::parse_hms(\"05:30:00\") assign_date(start, end) #> [1] 1970-01-01 23:11:00 UTC--1970-01-02 05:30:00 UTC #> [1] 1970-01-01 23:11:00 UTC--1970-01-02 05:30:00 UTC # Expected  start <- hms::parse_hms(\"10:15:00\") end <- hms::parse_hms(\"13:25:00\") assign_date(start, end) #> [1] 1970-01-01 10:15:00 UTC--1970-01-01 13:25:00 UTC #> [1] 1970-01-01 10:15:00 UTC--1970-01-01 13:25:00 UTC # Expected  start <- hms::parse_hms(\"05:42:00\") end <- hms::as_hms(NA) assign_date(start, end) #> [1] NA--NA #> [1] NA--NA # Expected  ## Vector example  start <- c(hms::parse_hm(\"09:45\"), hms::parse_hm(\"20:30\")) end <- c(hms::parse_hm(\"21:15\"), hms::parse_hm(\"04:30\")) assign_date(start, end) #> [1] 1970-01-01 09:45:00 UTC--1970-01-01 21:15:00 UTC #> [2] 1970-01-01 20:30:00 UTC--1970-01-02 04:30:00 UTC #> [1] 1970-01-01 09:45:00 UTC--1970-01-01 21:15:00 UTC # Expected #> [2] 1970-01-01 20:30:00 UTC--1970-01-02 04:30:00 UTC # Expected  ## To assign a 24 hours interval to ambiguities  start <- lubridate::as_datetime(\"1985-01-15 12:00:00\") end <- lubridate::as_datetime(\"2020-09-10 12:00:00\") assign_date(start, end, ambiguity = 24) #> [1] 1970-01-01 12:00:00 UTC--1970-01-02 12:00:00 UTC #> [1] 1970-01-01 12:00:00 UTC--1970-01-02 12:00:00 UTC # Expected"},{"path":"https://danielvartan.github.io/lubritime/reference/change_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Change Date components — change_date","title":"Change Date components — change_date","text":"change_*() allows change day, month, year, date Date, POSIXct, POSIXlt object.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/change_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change Date components — change_date","text":"","code":"change_date(x, date)  change_day(x, day)  change_month(x, month)  change_year(x, year)"},{"path":"https://danielvartan.github.io/lubritime/reference/change_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change Date components — change_date","text":"x Date, POSIXct, POSIXlt object. date character Date object representing new date. day numeric object representing day month. month numeric object representing month year. year numeric object representing year.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/change_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change Date components — change_date","text":"Date, POSIXct, POSIXlt object new day, month, year, date.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/change_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change Date components — change_date","text":"","code":"## Scalar example  change_day(as.Date(\"2021-01-01\"), 15) #> [1] \"2021-01-15\" #> [1] \"2021-01-15\" # Expected  change_month(as.POSIXct(\"2021-01-01 12:00:00\", tz = \"UTC\"), 12) #> [1] \"2021-12-01 12:00:00 UTC\" #> [1] \"2021-12-01 12:00:00 UTC\" # Expected  change_year(as.POSIXlt(\"2021-01-01 12:00:00\", tz = \"UTC\"), 2022) #> [1] \"2022-01-01 12:00:00 UTC\" #> [1] \"2022-01-01 12:00:00 UTC\" # Expected  change_date(   x = as.POSIXlt(\"2021-01-01 12:00:00\", tz = \"UTC\"),   date = as.Date(\"2000-01-01\") ) #> [1] \"2000-01-01 12:00:00 UTC\" #> [1] \"2000-01-01 12:00:00 UTC\" # Expected  ## Vector example  x <- as.Date(c(\"2021-01-01\", \"2021-01-01\")) change_day(x, 15) #> [1] \"2021-01-15\" \"2021-01-15\" #> [1] \"2021-01-15\" \"2021-01-15\" # Expected  x <- as.POSIXct(c(\"2021-01-01 12:00:00\", \"2021-01-01 12:00:00\"), tz = \"UTC\") change_month(x, 10:11) #> [1] \"2021-10-01 12:00:00 UTC\" \"2021-11-01 12:00:00 UTC\" #> [1] \"2021-10-01 12:00:00 UTC\" \"2021-11-01 12:00:00 UTC\" # Expected  x <- as.POSIXlt(c(\"2021-01-01 12:00:00\", \"2021-01-01 12:00:00\"), tz = \"UTC\") change_year(x, 2022) #> [1] \"2022-01-01 12:00:00 UTC\" \"2022-01-01 12:00:00 UTC\" #> [1] \"2022-01-01 12:00:00 UTC\" \"2022-01-01 12:00:00 UTC\" # Expected  x <- as.POSIXlt(c(\"2021-01-01 12:00:00\", \"2021-01-01 12:00:00\"), tz = \"UTC\") change_date(x, as.Date(\"2000-01-01\")) #> [1] \"2000-01-01 12:00:00 UTC\" \"2000-01-01 12:00:00 UTC\" #> [1] \"2000-01-01 12:00:00 UTC\" \"2000-01-01 12:00:00 UTC\" # Expected"},{"path":"https://danielvartan.github.io/lubritime/reference/convert_to_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a numerical object to a specific unit — convert_to_unit","title":"Convert a numerical object to a specific unit — convert_to_unit","text":"convert_to_unit() allows convert numerical object different kind units. See Units section information units convert_to_unit() can handle.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/convert_to_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a numerical object to a specific unit — convert_to_unit","text":"","code":"convert_to_unit(x, from = \"seconds\", to = \"hours\")"},{"path":"https://danielvartan.github.io/lubritime/reference/convert_to_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a numerical object to a specific unit — convert_to_unit","text":"x numeric object. string indicating unit x (see Units section learn ) (default: \"seconds\"). (optional) string indicating desire output unit (see Units section learn ) (default: \"hours\").","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/convert_to_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a numerical object to a specific unit — convert_to_unit","text":"numeric object representing decimals hours x.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/convert_to_unit.html","id":"units","dir":"Reference","previous_headings":"","what":"Units","title":"Convert a numerical object to a specific unit — convert_to_unit","text":"units convert_to_unit() can handle now: years. weeks. days. hours. minutes. seconds. milliseconds. microseconds. nanoseconds. degrees. radians.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/convert_to_unit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a numerical object to a specific unit — convert_to_unit","text":"","code":"convert_to_unit(60, \"seconds\", \"minutes\") #> [1] 1 #> [1] 1  convert_to_unit(1, \"minute\", \"hours\") #> [1] 0.01666667 #> [1] 0.01666667  convert_to_unit(1, \"hour\", \"days\") #> [1] 0.04166667 #> [1] 0.0416666  convert_to_unit(1, \"day\", \"weeks\") #> [1] 0.1428571 #> [1] 0.1428571  convert_to_unit(7, \"days\", \"weeks\") #> [1] 1 #> [1] 1  convert_to_unit(1, \"week\", \"days\") #> [1] 7 #> [1] 7"},{"path":"https://danielvartan.github.io/lubritime/reference/cycle_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Cycle time objects — cycle_time","title":"Cycle time objects — cycle_time","text":"cycle_time() cycles time span objects predetermined cycle length, adapting linear time objects circular time frame.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/cycle_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cycle time objects — cycle_time","text":"","code":"cycle_time(time, cycle, reverse = TRUE)  # S3 method for class 'numeric' cycle_time(time, cycle, reverse = TRUE)  # S3 method for class 'Duration' cycle_time(time, cycle, reverse = TRUE)  # S3 method for class 'difftime' cycle_time(time, cycle, reverse = TRUE)  # S3 method for class 'hms' cycle_time(time, cycle, reverse = TRUE)"},{"path":"https://danielvartan.github.io/lubritime/reference/cycle_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cycle time objects — cycle_time","text":"time object belonging one following classes: numeric, Duration, difftime, hms. cycle numeric Duration object length 1, equal greater 0, indicating cycle length seconds. See Details section learn . reverse (optional) logical value indicating function must use reverse cycle negative values time. See Details section learn (default: TRUE).","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/cycle_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cycle time objects — cycle_time","text":"type object time cycled cycle parameter.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/cycle_time.html","id":"linear-versus-circular-time","dir":"Reference","previous_headings":"","what":"Linear versus circular time","title":"Cycle time objects — cycle_time","text":"Time can different \"shapes\". objective measure duration (time span) event, time usually measured considering linear frame, fixed point origin. context, time value distance infinity relation origin.   possible \"shape\" time, can also measured contexts. \"time day\" context, time linked rotation earth, \"resetting\" new rotation cycle starts. brings different kind shape time: circular shape. shape time value encounters origin beginning end cycle.   transpose circular time frame linear one, look like :   Note now origin fixed, cyclical. cycle_time() operates converting linear time objects using circular approach relative cycle length (e.g, cycle = 86400 (1 day)).","code":"B                              |----------|                                         A                              |---------------------|  - inf                                                inf + <----------------------------|----------|----------|------->  s                           0          5          10     s                            origin  A + B = 10 + 5 = 15s - <--- h ---> +                     origin                 . . . 0 . . .              .                 .             .                   .            .                     .           .                       .          .                         .          18                        6          .                         .           .                       .            .                     .             .                   .              .                 .                 . . . 12 . . .  18 + 6 = 0h <----|---------------|---------------|---------------|----->     0h              12h              0h             12h   origin                           origin"},{"path":"https://danielvartan.github.io/lubritime/reference/cycle_time.html","id":"fractional-time","dir":"Reference","previous_headings":"","what":"Fractional time","title":"Cycle time objects — cycle_time","text":"cycle_time() uses %% operator cycle values. Hence, can subject catastrophic loss accuracy time fractional much larger cycle. warning given detected. %% builtin R function operates like :","code":"function(a, b) {     a - floor(a / b) * b }"},{"path":"https://danielvartan.github.io/lubritime/reference/cycle_time.html","id":"negative-time-cycling","dir":"Reference","previous_headings":"","what":"Negative time cycling","title":"Cycle time objects — cycle_time","text":"time negative value reverse == FALSE, cycle_time() perform cycle considering absolute value time return result negative signal. However, time negative value reverse == TRUE (default), cycle_time() perform cycle reverse, relative origin. Example: -30h time span reversed cycle 24h, result 18h. removing full cycles -30h get -6h (-30 + 24), -6h relative origin 18h.","code":"- <--- h ---> +                     origin                 . . . 0 . . .               .                 .             .                   .            .                     .           .                       .          .                         .     (-6) 18                        6 (-18)          .                         .           .                       .            .                     .             .                   .              .                 .                 . . . 12 . . .                     (-12)"},{"path":"https://danielvartan.github.io/lubritime/reference/cycle_time.html","id":"period-objects","dir":"Reference","previous_headings":"","what":"Period objects","title":"Cycle time objects — cycle_time","text":"Period objects special type object developed lubridate team represents \"human units\", ignoring possible timeline irregularities. say 1 day Period can different time spans, looking timeline irregularity event. Since time span Period object can fluctuate, cycle_time() accept kind object. can transform Duration object still use function, beware can produce errors. Learn Period objects Dates times chapter Wickham & Grolemund book (n.d.).","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/cycle_time.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cycle time objects — cycle_time","text":"Wickham, H., & Grolemund, G. (n.d.). R data science. (n.p.). https://r4ds..co.nz","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/cycle_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cycle time objects — cycle_time","text":"","code":"## Scalar example  time <- lubridate::dhours(25) cycle <- lubridate::ddays(1) cycle_time(time, cycle) #> [1] \"3600s (~1 hours)\" #> [1] \"3600s (~1 hours)\" # Expected  time <- lubridate::dhours(-25) cycle <- lubridate::ddays(1) reverse <- FALSE cycle_time(time, cycle, reverse) #> [1] \"-3600s (~-1 hours)\" #> [1] \"-3600s (~-1 hours)\" # Expected  time <- lubridate::dhours(-25) cycle <- lubridate::ddays(1) reverse <- TRUE cycle_time(time, cycle, reverse) #> [1] \"82800s (~23 hours)\" #> [1] \"82800s (~23 hours)\" # Expected  ## Vector example  time <- c(lubridate::dmonths(24), lubridate::dmonths(13)) cycle <- lubridate::dyears(1) cycle_time(time, cycle) #> [1] \"0s\"                     \"2629800s (~4.35 weeks)\" #> [1] \"0s\"                     \"2629800s (~4.35 weeks)\" # Expected  time <- c(lubridate::dmonths(24), lubridate::dmonths(-13)) cycle <- lubridate::dyears(1) reverse <- FALSE cycle_time(time, cycle, reverse) #> [1] \"0s\"                       \"-2629800s (~-4.35 weeks)\" #> [1] \"0s\"                       \"-2629800s (~-4.35 weeks)\" # Expected  time <- c(lubridate::dmonths(24), lubridate::dmonths(-13)) cycle <- lubridate::dyears(1) reverse <- TRUE cycle_time(time, cycle, reverse) #> [1] \"0s\"                       \"28927800s (~47.83 weeks)\" #> [1] \"0s\"                       \"28927800s (~47.83 weeks)\" # Expected"},{"path":"https://danielvartan.github.io/lubritime/reference/fix_hms.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform 24:00:00 to 00:00:00 for hms objects — fix_hms","title":"Transform 24:00:00 to 00:00:00 for hms objects — fix_hms","text":"fix_hms() quick fix hms objects time 24:00:00. function transforms time 00:00:00 consistency POSIXt class.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/fix_hms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform 24:00:00 to 00:00:00 for hms objects — fix_hms","text":"","code":"fix_hms(x)"},{"path":"https://danielvartan.github.io/lubritime/reference/fix_hms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform 24:00:00 to 00:00:00 for hms objects — fix_hms","text":"x hms vector.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/fix_hms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform 24:00:00 to 00:00:00 for hms objects — fix_hms","text":"hms vector.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/fix_hms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform 24:00:00 to 00:00:00 for hms objects — fix_hms","text":"","code":"hms::parse_hm(\"24:00\") |> fix_hms() #> 00:00:00 #> 00:00:00 # Expected  hms::parse_hm(c(\"02:00\", \"24:00\", \"18:00\")) |> fix_hms() #> 02:00:00 #> 00:00:00 #> 18:00:00 02:00:00 # Expected #> Warning: numerical expression has 3 elements: only the first used #> [1] 2 1 0 00:00:00 #> [1] 0 18:00:00 #> Warning: numerical expression has 19 elements: only the first used #>  [1] 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0"},{"path":"https://danielvartan.github.io/lubritime/reference/flat_posixt_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust the date or time of a POSIXt vector to a specific date or hour — flat_posixt_date","title":"Adjust the date or time of a POSIXt vector to a specific date or hour — flat_posixt_date","text":"flat_posixt_* functions adjust date time POSIXt vector specific date hour, UTC default timezone. functions particularly useful performing time arithmetic time objects lack date reference (e.g., hms objects).","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/flat_posixt_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust the date or time of a POSIXt vector to a specific date or hour — flat_posixt_date","text":"","code":"flat_posixt_date(x, base = as.Date(\"1970-01-01\"), force_tz = TRUE, tz = \"UTC\")  flat_posixt_hour(x, base = hms::parse_hm(\"00:00\"), force_tz = TRUE, tz = \"UTC\")"},{"path":"https://danielvartan.github.io/lubritime/reference/flat_posixt_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust the date or time of a POSIXt vector to a specific date or hour — flat_posixt_date","text":"x posixt vector. base Date (flat_posixt_date() hms (flat_posixt_hour()) value (Default: .Date(\"1970-01-01\") (Unix Epoch) hms::parse_hm(\"00:00\")). force_tz logical flag indicating whether force timezone output tz (Default: TRUE). tz character string indicating timezone use force_tz TRUE (Default: \"UTC\").","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/flat_posixt_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust the date or time of a POSIXt vector to a specific date or hour — flat_posixt_date","text":"posixt vector.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/flat_posixt_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust the date or time of a POSIXt vector to a specific date or hour — flat_posixt_date","text":"","code":"as.POSIXct(\"2020-01-01 05:55:55\", tz = \"America/Sao_Paulo\") |>   flat_posixt_date() #> [1] \"1970-01-01 05:55:55 UTC\" #> [1] \"1970-01-01 05:55:55 UTC\" # Expected  c(   as.POSIXct(\"2020-01-01 05:55:55\", tz = \"America/Sao_Paulo\"),   as.POSIXct(\"2020-01-01 18:40:05\", tz = \"America/Sao_Paulo\") ) |>  flat_posixt_date() #> [1] \"1970-01-01 05:55:55 UTC\" \"1970-01-01 18:40:05 UTC\" #> [1] \"1970-01-01 05:55:55 UTC\" \"1970-01-01 18:40:05 UTC\" # Expected  as.POSIXct(\"2020-01-01 05:55:55\", tz = \"America/Sao_Paulo\") |>  flat_posixt_hour(base = hms::parse_hm(\"00:01\")) #> [1] \"2020-01-01 00:01:00 UTC\" #> [1] \"2020-01-01 00:01:00 UTC\" # Expected  c(  as.POSIXct(\"2020-01-01 05:55:55\", tz = \"America/Sao_Paulo\"),  as.POSIXct(\"2020-01-01 18:40:05\", tz = \"America/Sao_Paulo\") ) |>  flat_posixt_hour(base = hms::parse_hm(\"00:01\")) #> [1] \"2020-01-01 00:01:00 UTC\" \"2020-01-01 00:01:00 UTC\" #> [1] \"2020-01-01 00:01:00 UTC\" \"2020-01-01 00:01:00 UTC\" # Expected"},{"path":"https://danielvartan.github.io/lubritime/reference/get_last_week.html","id":null,"dir":"Reference","previous_headings":"","what":"Get last week or month — get_last_week","title":"Get last week or month — get_last_week","text":"get_last_week() get_last_month() return last week month interval, respectively, based reference date.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/get_last_week.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get last week or month — get_last_week","text":"","code":"get_last_week(date = Sys.Date())  get_last_month(date = Sys.Date())"},{"path":"https://danielvartan.github.io/lubritime/reference/get_last_week.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get last week or month — get_last_week","text":"date (optional) Date object reference date (default: Sys.Date()).","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/get_last_week.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get last week or month — get_last_week","text":"Interval object last week month.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/get_last_week.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get last week or month — get_last_week","text":"","code":"## Scalar example  get_last_week(as.Date(\"2024-12-06\")) #> [1] 2024-11-24 UTC--2024-11-30 UTC #> [1] 2024-11-24 UTC--2024-11-30 UTC # Expected  get_last_month(as.Date(\"2024-12-06\")) #> [1] 2024-11-01 UTC--2024-11-30 UTC #> [1] 2024-11-01 UTC--2024-11-30 UTC # Expected  ## Vector example  get_last_week(as.Date(c(\"2024-12-06\", \"2024-12-15\"))) #> [1] 2024-11-24 UTC--2024-11-30 UTC 2024-12-08 UTC--2024-12-14 UTC #> [1] 2024-11-24 UTC--2024-11-30 UTC # Expected #' [1] 2024-12-08 UTC--2024-12-14 UTC # Expected  get_last_month(as.Date(c(\"2024-12-06\", \"2024-11-15\"))) #> [1] 2024-11-01 UTC--2024-11-30 UTC 2024-10-01 UTC--2024-10-31 UTC #> [1] 2024-11-01 UTC--2024-11-30 UTC  # Expected #> [2] 2024-10-01 UTC--2024-10-31 UTC # Expected"},{"path":"https://danielvartan.github.io/lubritime/reference/int_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the duration of an Interval object — int_duration","title":"Compute the duration of an Interval object — int_duration","text":"int_duration() computes duration Interval object","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/int_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the duration of an Interval object — int_duration","text":"","code":"int_duration(int = NULL)"},{"path":"https://danielvartan.github.io/lubritime/reference/int_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the duration of an Interval object — int_duration","text":"int Interval vector.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/int_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the duration of an Interval object — int_duration","text":"Duration vector.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/int_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the duration of an Interval object — int_duration","text":"","code":"lubridate::interval(   lubridate::ymd_hms(\"2023-01-01 22:00:01\", tz = \"UTC\"),   lubridate::ymd_hms(\"2023-01-02 02:00:01\", tz = \"UTC\"),   tzone = \"UTC\" ) |>   int_duration() #> [1] \"14400s (~4 hours)\" #> [1] \"14400s (~4 hours)\" # Expected  lubridate::interval(   lubridate::ymd_hms(\"2023-01-01 22:00:01\", tz = \"UTC\"),   lubridate::ymd_hms(\"2023-01-02 02:00:01\", tz = \"UTC\"),   tzone = \"UTC\" ) |>   int_duration() |>   lubridate::as.period() #> [1] \"4H 0M 0S\" #> [1] \"4H 0M 0S\" # Expected  c(   lubridate::interval(     lubridate::ymd_hms(\"2023-01-01 22:00:01\", tz = \"UTC\"),     lubridate::ymd_hms(\"2023-01-02 02:00:01\", tz = \"UTC\"),     tzone = \"UTC\"   ),   lubridate::interval(     lubridate::ymd_hms(\"1990-01-01 06:00:00\", tz = \"UTC\"),     lubridate::ymd_hms(\"1990-01-01 12:00:00\", tz = \"UTC\"),     tzone = \"UTC\"   ) ) |>   int_duration() #> [1] \"14400s (~4 hours)\" \"21600s (~6 hours)\" #> [1] \"14400s (~4 hours)\" \"21600s (~6 hours)\" # Expected"},{"path":"https://danielvartan.github.io/lubritime/reference/int_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the mean of an Interval object — int_mean","title":"Compute the mean of an Interval object — int_mean","text":"int_mean() computes mean Interval object.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/int_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the mean of an Interval object — int_mean","text":"","code":"int_mean(int)"},{"path":"https://danielvartan.github.io/lubritime/reference/int_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the mean of an Interval object — int_mean","text":"int Interval vector.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/int_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the mean of an Interval object — int_mean","text":"Interval vector.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/int_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the mean of an Interval object — int_mean","text":"","code":"lubridate::interval(   lubridate::ymd_hms(\"2023-01-01 22:00:01\", tz = \"UTC\"),   lubridate::ymd_hms(\"2023-01-02 02:00:01\", tz = \"UTC\"),   tzone = \"UTC\" ) |>   int_mean() #> [1] \"2023-01-02 00:00:01 UTC\" #> [1] \"2023-01-02 00:00:01 UTC\" # Expected  c(   lubridate::interval(     lubridate::ymd_hms(\"2023-01-01 22:00:01\", tz = \"UTC\"),     lubridate::ymd_hms(\"2023-01-02 02:00:01\", tz = \"UTC\"),     tzone = \"UTC\"   ),   lubridate::interval(     lubridate::ymd_hms(\"1990-01-01 06:00:00\", tz = \"UTC\"),     lubridate::ymd_hms(\"1990-01-01 12:00:00\", tz = \"UTC\"),     tzone = \"UTC\"   ) ) |>   int_mean() #> [1] \"2023-01-02 00:00:01 UTC\" \"1990-01-01 09:00:00 UTC\" #> [1] \"2023-01-02 00:00:01 UTC\" \"1990-01-01 09:00:00 UTC\" # Expected"},{"path":"https://danielvartan.github.io/lubritime/reference/link_to_timeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Link local times to a timeline — link_to_timeline","title":"Link local times to a timeline — link_to_timeline","text":"link_to_timeline() links local times (e.g., 10:00, 22:00) onto two-day timeline based specified threshold. function particularly useful time arithmetic dealing circular time representations. information circular time, see cycle_time() Details section.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/link_to_timeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Link local times to a timeline — link_to_timeline","text":"","code":"link_to_timeline(x, threshold = hms::parse_hms(\"12:00:00\"))"},{"path":"https://danielvartan.github.io/lubritime/reference/link_to_timeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Link local times to a timeline — link_to_timeline","text":"x hms POSIXt object. x POSIXt object, time part used. threshold (Optional) hms object representing threshold time (Default: hms::parse_hms(\"12:00:00\")).","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/link_to_timeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Link local times to a timeline — link_to_timeline","text":"POSIXt object time x, linked timeline based threshold Unix epoch. See Details section information.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/link_to_timeline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Link local times to a timeline — link_to_timeline","text":"link_to_timeline() link local times onto two-day timeline based threshold time Unix epoch (1970-01-01). example, threshold time 12:00:00, times threshold linked day Unix epoch (1970-01-02) times threshold linked Unix epoch (1970-01-01). exception times threshold. case, function just return times linked Unix epoch (1970-01-01). Please note Unix Epoch origin time POSIXct class. means .POSIXct(\"1970-01-01 00:00:00\", tz = \"UTC\") |> .numeric() equal 0.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/link_to_timeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Link local times to a timeline — link_to_timeline","text":"","code":"hms::parse_hm(\"18:00\") |>   link_to_timeline(threshold = hms::parse_hms(\"12:00:00\")) #> [1] \"1970-01-01 18:00:00 UTC\" #> [1] \"1970-01-01 18:00:00 UTC\" # Expected  as.POSIXct(\"2020-01-01 05:00:00\", tz = \"UTC\") |>   link_to_timeline(threshold = hms::parse_hms(\"12:00:00\")) #> [1] \"1970-01-01 05:00:00 UTC\" #> [1] \"1970-01-01 05:00:00 UTC\" # Expected  c(hms::parse_hm(\"18:00\"), hms::parse_hm(\"06:00\")) |>   link_to_timeline(threshold = hms::parse_hms(\"12:00:00\")) #> [1] \"1970-01-01 18:00:00 UTC\" \"1970-01-02 06:00:00 UTC\" #> [1] \"1970-01-01 18:00:00 UTC\" \"1970-01-02 06:00:00 UTC\" # Expected  c(as.POSIXct(\"2020-01-01 20:00:00\", tz = \"UTC\"),   as.POSIXct(\"2020-01-01 05:00:00\", tz = \"UTC\")) |>   link_to_timeline() #> [1] \"1970-01-01 20:00:00 UTC\" \"1970-01-02 05:00:00 UTC\" #> [1] \"1970-01-01 20:00:00 UTC\" \"1970-01-02 05:00:00 UTC\" # Expected  ## Using a Different Threshold  c(as.POSIXct(\"2020-01-01 20:00:00\", tz = \"UTC\"),   as.POSIXct(\"2020-01-01 01:00:00\", tz = \"UTC\")) |>   link_to_timeline(threshold = hms::parse_hms(\"02:00:00\")) #> [1] \"1970-01-01 20:00:00 UTC\" \"1970-01-02 01:00:00 UTC\" #> [1] \"1970-01-01 20:00:00 UTC\" \"1970-01-02 01:00:00 UTC\" # Expected  c(hms::parse_hm(\"06:00\"), hms::parse_hm(\"18:00\")) |>   link_to_timeline(threshold = hms::parse_hms(\"02:00:00\")) #> [1] \"1970-01-01 06:00:00 UTC\" \"1970-01-01 18:00:00 UTC\" #> [1] \"1970-01-01 06:00:00 UTC\" \"1970-01-01 18:00:00 UTC\" # Expected  ## With All Values Below or Above the Threshold ## (Returns on day one (`1970-01-01`))  c(hms::parse_hm(\"03:00\"), hms::parse_hm(\"06:00\")) |>   link_to_timeline(threshold = hms::parse_hms(\"12:00:00\")) #> [1] \"1970-01-01 03:00:00 UTC\" \"1970-01-01 06:00:00 UTC\" #> [1] \"1970-01-01 03:00:00 UTC\" \"1970-01-01 06:00:00 UTC\" # Expected  c(hms::parse_hm(\"06:00\"), hms::parse_hm(\"18:00\")) |>   link_to_timeline(threshold = hms::parse_hms(\"02:00:00\")) #> [1] \"1970-01-01 06:00:00 UTC\" \"1970-01-01 18:00:00 UTC\" #> [1] \"1970-01-01 06:00:00 UTC\" \"1970-01-01 18:00:00 UTC\" # Expected  ## Doing Time Arithmetic  #                8h        (Day 1)         8h # <----|-----------------------|-----------------------|-----> #    06:00                   14:00                   22:00h  c(hms::parse_hm(\"06:00\"), hms::parse_hm(\"22:00\")) |>   mean() |>   hms::as_hms() #> 14:00:00 #> 14:00:00 # Expected  #   (Day 1)        4h                    4h         (Day 2) # <----|-----------------------|-----------------------|-----> #    22:00                   02:00                   06:00h  c(hms::parse_hm(\"22:00\"), hms::parse_hm(\"06:00\")) |>   link_to_timeline(threshold = hms::parse_hms(\"12:00:00\")) |>   mean() |>   hms::as_hms() #> 02:00:00 #> 02:00:00 # Expected"},{"path":"https://danielvartan.github.io/lubritime/reference/lubritime-package.html","id":null,"dir":"Reference","previous_headings":"","what":"lubritime: An Extension for lubridate — lubritime-package","title":"lubritime: An Extension for lubridate — lubritime-package","text":"extension 'lubridate' package tidyverse, adding new features deal temporal objects.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/lubritime-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"lubritime: An Extension for lubridate — lubritime-package","text":"Maintainer: Daniel Vartanian danvartan@gmail.com (ORCID) [conceptor, copyright holder]","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/round_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Round time objects — round_time","title":"Round time objects — round_time","text":"round_time() takes Duration, difftime, hms, POSIXct, POSIXlt object round seconds level.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/round_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round time objects — round_time","text":"","code":"round_time(x)  # S3 method for class 'Duration' round_time(x)  # S3 method for class 'difftime' round_time(x)  # S3 method for class 'hms' round_time(x)  # S3 method for class 'POSIXct' round_time(x)  # S3 method for class 'POSIXlt' round_time(x)"},{"path":"https://danielvartan.github.io/lubritime/reference/round_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round time objects — round_time","text":"x object belonging one following classes: Duration, difftime, hms, POSIXct, POSIXlt.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/round_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round time objects — round_time","text":"object class x rounded seconds level.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/round_time.html","id":"round-standard","dir":"Reference","previous_headings":"","what":"Round standard","title":"Round time objects — round_time","text":"round_time() uses base::round() rounding. say round_time() uses IEC 60559 standard (\"go even digit\") rounding 5. Therefore, round(0.5) equal 0 round(-1.5) equal -2. See ?round learn .","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/round_time.html","id":"period-objects","dir":"Reference","previous_headings":"","what":"Period objects","title":"Round time objects — round_time","text":"Period objects special type objects developed lubridate team represents \"human units\", ignoring possible timeline irregularities. say 1 day Period can different time spans, looking timeline irregularity event. Since time span Period object can fluctuate, round_time() accept kind object. can transform Duration object still use function, beware can produce errors. Learn Period objects Dates times chapter Wickham & Grolemund book (n.d.).","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/round_time.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Round time objects — round_time","text":"Wickham, H., & Grolemund, G. (n.d.). R data science. (n.p.). https://r4ds..co.nz","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/round_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round time objects — round_time","text":"","code":"## Scalar example  lubridate::dmilliseconds(123456789) #> [1] \"123456.789s (~1.43 days)\" #> [1] \"123456.789s (~1.43 days)\" # Expected round_time(lubridate::dmilliseconds(123456789)) #> [1] \"123457s (~1.43 days)\" #> [1] \"123457s (~1.43 days)\" # Expected  as.difftime(12345.6789, units = \"secs\") #> Time difference of 12345.68 secs #> Time difference of 12345.68 secs # Expected round_time(as.difftime(12345.6789, units = \"secs\")) #> Time difference of 12346 secs #> Time difference of 12346 secs # Expected  hms::as_hms(12345.6789) #> 03:25:45.6789 #> 03:25:45.6789 # Expected round_time(hms::as_hms(12345.6789)) #> 03:25:46 #> 03:25:46 # Expected  lubridate::as_datetime(12345.6789, tz = \"EST\") #> [1] \"1969-12-31 22:25:45 EST\" #> [1] \"1969-12-31 22:25:45 EST\" # Expected as.numeric(lubridate::as_datetime(12345.6789, tz = \"EST\")) #> [1] 12345.68 #> [1] 12345.68 # Expected round_time(lubridate::as_datetime(12345.6789, tz = \"EST\")) #> [1] \"1969-12-31 22:25:46 EST\" #> [1] \"1969-12-31 22:25:46 EST\" # Expected as.numeric(round_time(lubridate::as_datetime(12345.6789, tz = \"EST\"))) #> [1] 12346 #> [1] 12346 # Expected  ## Vector example  c(lubridate::dhours(5.6987), lubridate::dhours(2.6875154)) #> [1] \"20515.32s (~5.7 hours)\"    \"9675.05544s (~2.69 hours)\" #> [1] \"20515.32s (~5.7 hours)\"    \"9675.05544s (~2.69 hours)\" # Expected round_time(c(lubridate::dhours(5.6987), lubridate::dhours(2.6875154))) #> [1] \"20515s (~5.7 hours)\" \"9675s (~2.69 hours)\" #> [1] \"20515s (~5.7 hours)\" \"9675s (~2.69 hours)\" # Expected"},{"path":"https://danielvartan.github.io/lubritime/reference/shorter_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the shorter or longer interval between two hours — shorter_int","title":"Find the shorter or longer interval between two hours — shorter_int","text":"shorter_int() returns shorter interval two hms POSIXt object hours. longer_int() inverse shorter_int(), .e., returns longer interval two hours. shorter_duration() longer_duration() return interval time span shorter_int() longer_int() Duration objects.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/shorter_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the shorter or longer interval between two hours — shorter_int","text":"","code":"shorter_int(x, y)  longer_int(x, y)  shorter_duration(x, y)  longer_duration(x, y)"},{"path":"https://danielvartan.github.io/lubritime/reference/shorter_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the shorter or longer interval between two hours — shorter_int","text":"x, y hms POSIXt object.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/shorter_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the shorter or longer interval between two hours — shorter_int","text":"shorter_int() longer_int(), Interval vector shorter longer interval x y. shorter_duration() longer_duration(), Duration vector shorter longer duration x y.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/shorter_int.html","id":"the-two-intervals-problem","dir":"Reference","previous_headings":"","what":"The two intervals problem","title":"Find the shorter or longer interval between two hours — shorter_int","text":"Given two hours, x y, two-day timeline, without date references, always two possible intervals , illustrated . figure interval  shorter longer, shorter_int() longer_int() verify two scenarios: 1. x comes y; 2. x comes y. works x value smaller y, therefore, function make sure swap x y values latter assumption true. shorter_int() objective find shorter interval, x y equal, shorter interval length 0 hours, resulting interval x x. , longer_int() used instead, latter condition return interval 24 hours length (x x + 1 day). cases x y distance 12 hours, shorter longer interval (equal length). cases, shorter_int() longer_int() return value (interval 12 hours).","code":"day 1                        day 2      x                  y         x                  y    06:00              22:00     06:00              22:00 -----|------------------|---------|------------------|----->               16h           8h             16h           longer int.  shorter int.   longer int.                day 1                      day 2      y                   x       y                   x    13:00               08:00   13:00               08:00 -----|-------------------|-------|-------------------|----->               19h           5h            19h           longer int.  shorter int.  longer int.      x,y             x,y             x,y             x,y      x               y               x               y    10:00           10:00           10:00           10:00 -----|---------------|---------------|---------------|----->     0h              0h              0h              0h             24h             24h             24h                day 1                      day 2      y               x               y               x    12:00           00:00           12:00           00:00 -----|---------------|---------------|---------------|----->             12h             12h             12h"},{"path":"https://danielvartan.github.io/lubritime/reference/shorter_int.html","id":"base-date-and-timezone","dir":"Reference","previous_headings":"","what":"Base date and timezone","title":"Find the shorter or longer interval between two hours — shorter_int","text":"shorter_int() longer_int() use Unix epoch (1970-01-01) date start date creating intervals. output always \"UTC\" set timezone. Learn time zones ?timezone.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/shorter_int.html","id":"posixt-objects","dir":"Reference","previous_headings":"","what":"POSIXt objects","title":"Find the shorter or longer interval between two hours — shorter_int","text":"POSIXt objects passed argument x y stripped dates. time considered. POSIXct POSIXlt objects inherits class POSIXt. Learn ?DateTimeClasses.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/shorter_int.html","id":"na-values","dir":"Reference","previous_headings":"","what":"NA values","title":"Find the shorter or longer interval between two hours — shorter_int","text":"shorter_int() longer_int() return Interval NA-NA x y NA. shorter_duration() longer_duration() return Duration NA  x y NA.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/shorter_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the shorter or longer interval between two hours — shorter_int","text":"","code":"x <- hms::parse_hm(\"23:00\") y <- hms::parse_hm(\"01:00\")  shorter_int(x, y) #> [1] 1970-01-01 23:00:00 UTC--1970-01-02 01:00:00 UTC #> [1] 1970-01-01 23:00:00 UTC--1970-01-02 01:00:00 UTC # Expected  shorter_duration(x, y) #> [1] \"7200s (~2 hours)\" #> [1] \"7200s (~2 hours)\" # Expected  longer_int(x, y) #> [1] 1970-01-01 01:00:00 UTC--1970-01-01 23:00:00 UTC #> [1] 1970-01-01 01:00:00 UTC--1970-01-01 23:00:00 UTC # Expected  longer_duration(x, y) #> [1] \"79200s (~22 hours)\" #> [1] \"79200s (~22 hours)\" # Expected  x <- lubridate::as_datetime(\"1985-01-15 12:00:00\") y <- lubridate::as_datetime(\"2020-09-10 12:00:00\")  shorter_int(x, y) #> [1] 1970-01-01 12:00:00 UTC--1970-01-01 12:00:00 UTC #> [1] 1970-01-01 12:00:00 UTC--1970-01-01 12:00:00 UTC # Expected  shorter_duration(x, y) #> [1] \"0s\" #> [1] \"0s\" # Expected  longer_int(x, y) #> [1] 1970-01-01 12:00:00 UTC--1970-01-02 12:00:00 UTC #> [1] 1970-01-01 12:00:00 UTC--1970-01-02 12:00:00 UTC # Expected  longer_duration(x, y) #> [1] \"86400s (~1 days)\" #> [1] \"86400s (~1 days)\" # Expected  x <- c(hms::parse_hm(\"15:30\"), hms::parse_hm(\"21:30\")) y <- c(hms::parse_hm(\"19:30\"), hms::parse_hm(\"04:00\"))  shorter_int(x, y) #> [1] 1970-01-01 15:30:00 UTC--1970-01-01 19:30:00 UTC #> [2] 1970-01-01 21:30:00 UTC--1970-01-02 04:00:00 UTC #> [1] 1970-01-01 15:30:00 UTC--1970-01-01 19:30:00 UTC # Expected #> [2] 1970-01-01 21:30:00 UTC--1970-01-02 04:00:00 UTC # Expected  shorter_duration(x, y) #> [1] \"14400s (~4 hours)\"   \"23400s (~6.5 hours)\" #> [1] [1] \"14400s (~4 hours)\"   \"23400s (~6.5 hours)\" # Expected  longer_int(x, y) #> [1] 1970-01-01 19:30:00 UTC--1970-01-02 15:30:00 UTC #> [2] 1970-01-01 04:00:00 UTC--1970-01-01 21:30:00 UTC #> [1] 1970-01-01 19:30:00 UTC--1970-01-02 15:30:00 UTC # Expected #> [2] 1970-01-01 04:00:00 UTC--1970-01-01 21:30:00 UTC # Expected  longer_duration(x, y) #> [1] \"72000s (~20 hours)\"   \"63000s (~17.5 hours)\" #> [1] \"72000s (~20 hours)\"   \"63000s (~17.5 hours)\" # Expected"},{"path":"https://danielvartan.github.io/lubritime/reference/sum_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum time objects — sum_time","title":"Sum time objects — sum_time","text":"sum_time() returns sum time different kinds date/time objects. vct_sum_time() returns vectorized sum time different kinds date/time objects. functions can set work circular time frame (see Details learn ).","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/sum_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum time objects — sum_time","text":"","code":"sum_time(..., cycle = NULL, reverse = TRUE, na_rm = FALSE)  vct_sum_time(..., cycle = NULL, reverse = TRUE, na_rm = FALSE)"},{"path":"https://danielvartan.github.io/lubritime/reference/sum_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum time objects — sum_time","text":"... Objects belonging one following classes: Duration, difftime, hms, POSIXct, POSIXlt, Interval. cycle (optional) numeric Duration object length 1, equal greater 0, indicating cycle length seconds. NULL function perform linear sum (see Details learn ) (default: NULL). reverse (optional) logical value indicating function must use reverse cycle negative sums (see Details learn ) (default: TRUE). na_rm (optional) logical value indicating function must remove NA values performing sum (default: FALSE).","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/sum_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum time objects — sum_time","text":"cycle = NULL, Duration object linear sum time objects .... cycle != NULL, Duration object circular sum time objects ....","code":""},{"path":[]},{"path":"https://danielvartan.github.io/lubritime/reference/sum_time.html","id":"sum-time-versus-vct-sum-time-","dir":"Reference","previous_headings":"","what":"sum_time() versus vct_sum_time()","title":"Sum time objects — sum_time","text":"sum_time() behaves similar sum(), sense aggregates time lengths values ... single data point. example, sum_time(c(x, y), z) output sum_time(x, y, z). vct_sum_time() performs different type sum (vectorized one). Instead aggregating time lengths, function perform paired sum elements. example, vct_sum_time(c(x, y), c(w, z)) return vector like c(sum_time(x, w), sum_time(y, z)). , vct_sum_time() requires objects ... length.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/sum_time.html","id":"linear-versus-circular-time","dir":"Reference","previous_headings":"","what":"Linear versus circular time","title":"Sum time objects — sum_time","text":"Time can different \"shapes\". objective measure duration (time span) event, time usually measured considering linear frame, fixed point origin. context, time value distance infinity relation origin.   possible \"shape\" time, can also measured contexts. \"time day\" context, time linked rotation earth, \"resetting\" new rotation cycle starts. brings different kind shape time: circular shape. shape time value encounters origin end cycle.   transpose circular time frame linear one, look like :   Note now origin fix, cyclical. sum_time() vct_sum_time() can operate either linear circular fashion. cycle = NULL (default), function use linear approach. Else, function use circular approach relative cycle length (e.g, cycle = 86400 (1 day)).","code":"B                              |----------|                                         A                              |---------------------|  - inf                                                inf + <----------------------------|----------|----------|------->  s                           0          5          10     s                            origin  A + B = 10 + 5 = 15s - <--- h ---> +                     origin                 . . . 0 . . .              .                 .             .                   .            .                     .           .                       .          .                         .          18                        6          .                         .           .                       .            .                     .             .                   .              .                 .                 . . . 12 . . .  18 + 6 = 0h <----|---------------|---------------|---------------|----->     0h              12h              0h             12h   origin                           origin"},{"path":"https://danielvartan.github.io/lubritime/reference/sum_time.html","id":"fractional-time","dir":"Reference","previous_headings":"","what":"Fractional time","title":"Sum time objects — sum_time","text":"sum_time() uses %% operator cycle values. Hence, can subject catastrophic loss accuracy values ... fractional much larger cycle. warning given detected. %% builtin R function operates like :","code":"function(a, b) {     a - floor(a / b) * b }"},{"path":"https://danielvartan.github.io/lubritime/reference/sum_time.html","id":"negative-time-cycling","dir":"Reference","previous_headings":"","what":"Negative time cycling","title":"Sum time objects — sum_time","text":"sum time negative, cycle assigned reverse = FALSE, sum_time() vtc_sum_time() perform cycle considering absolute value sum return result negative signal. However, sum time negative value, cycle assigned reverse = TRUE (default), sum_time() vtc_sum_time() perform cycle reverse, relative origin. Example: sum time -30h time span reversed cycle 24h, result 18h. removing full cycles -30h get -6h (-30 + 24), -6h relative origin 18h.","code":"- <--- h ---> +                     origin                 . . . 0 . . .               .                 .             .                   .            .                     .           .                       .          .                         .     (-6) 18                        6 (-18)          .                         .           .                       .            .                     .             .                   .              .                 .                 . . . 12 . . .                     (-12)"},{"path":"https://danielvartan.github.io/lubritime/reference/sum_time.html","id":"period-objects","dir":"Reference","previous_headings":"","what":"Period objects","title":"Sum time objects — sum_time","text":"Period objects special type objects developed lubridate team represents \"human units\", ignoring possible timeline irregularities. say 1 day Period can different time spans, looking timeline irregularity event. Since time span Period object can fluctuate, sum_time() vct_sum_time() accept kind object. can transform Duration object still use functions, beware can produce errors. Learn Period objects Dates times chapter Wickham & Grolemund book (n.d.).","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/sum_time.html","id":"posixt-objects","dir":"Reference","previous_headings":"","what":"POSIXt objects","title":"Sum time objects — sum_time","text":"POSIXt objects ... stripped dates. time considered. POSIXct POSIXlt objects inherits class POSIXt. Learn ?DateTimeClasses.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/sum_time.html","id":"interval-objects","dir":"Reference","previous_headings":"","what":"Interval objects","title":"Sum time objects — sum_time","text":"using Interval objects ..., sum_time() vct_sum_time() consider time spans. , amount seconds intervals. Learn Interval objects Dates times chapter Wickham & Grolemund (n.d.).","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/sum_time.html","id":"timeline-irregularities","dir":"Reference","previous_headings":"","what":"Timeline irregularities","title":"Sum time objects — sum_time","text":"function take account timeline irregularities (e.g., leap years, DST, leap seconds). may issue people, must considered time arithmetic.","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/sum_time.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sum time objects — sum_time","text":"Wickham, H., & Grolemund, G. (n.d.). R data science. (n.p.). https://r4ds..co.nz","code":""},{"path":"https://danielvartan.github.io/lubritime/reference/sum_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum time objects — sum_time","text":"","code":"## Non-vectorized sum in an linear time frame  x <- c(as.POSIXct(\"2020-01-01 15:00:00\"), as.POSIXct(\"1999-05-04 17:30:00\")) y <- lubridate::as.interval(lubridate::dhours(7), as.Date(\"1970-05-08\")) sum_time(x, y) #> [1] \"142200s (~1.65 days)\" #> [1] \"142200s (~1.65 days)\" # 39:30:00 # Expected  ## Non-vectorized sum in a circular time frame of 24 hours  x <- c(lubridate::dhours(25), lubridate::dhours(5), lubridate::dminutes(50)) sum_time(x, cycle = lubridate::ddays()) #> [1] \"24600s (~6.83 hours)\" #> [1] \"24600s (~6.83 hours)\" # 06:50:00 # Expected  x <- c(hms::parse_hm(\"00:15\"), hms::parse_hm(\"02:30\"), hms::as_hms(NA)) sum_time(x, cycle = lubridate::ddays()) #> [1] NA #> NA # Expected sum_time(x, cycle = lubridate::ddays(), na_rm = TRUE) #> [1] \"9900s (~2.75 hours)\" #> [1] \"9900s (~2.75 hours)\" # 02:45:00 # Expected  x <- c(lubridate::dhours(-12), lubridate::dhours(-13)) sum_time(x, cycle = lubridate::ddays(), reverse = FALSE) #> [1] \"-3600s (~-1 hours)\" #> [1] \"-3600s (~-1 hours)\" # -01:00:00 # Expected  x <- c(lubridate::dhours(-12), lubridate::dhours(-13)) sum_time(x, cycle = lubridate::ddays(), reverse = TRUE) #> [1] \"82800s (~23 hours)\" #> [1] \"82800s (~23 hours)\" # 23:00:00 # Expected  ## Vectorized sum in an linear time frame  x <- c(lubridate::dhours(6), NA) y <- c(hms::parse_hm(\"23:00\"), hms::parse_hm(\"10:00\")) vct_sum_time(x, y) #> [1] \"104400s (~1.21 days)\" NA                     #> [1] \"104400s (~1.21 days)\" NA # 29:00:00 NA # Expected vct_sum_time(x, y, na_rm = TRUE) #> [1] \"104400s (~1.21 days)\" \"36000s (~10 hours)\"   #> [1] \"104400s (~1.21 days)\" \"36000s (~10 hours)\" # Expected  ## Vectorized sum in a circular time frame of 24 hours  x <- c(lubridate::dhours(6), NA) y <- c(hms::parse_hm(\"23:00\"), hms::parse_hm(\"10:00\")) vct_sum_time(x, y, cycle = lubridate::ddays()) #> [1] \"18000s (~5 hours)\" NA                  #> [1] \"18000s (~5 hours)\" NA  # Expected vct_sum_time(x, y, cycle = lubridate::ddays(), na_rm = TRUE) #> [1] \"18000s (~5 hours)\"  \"36000s (~10 hours)\" #> [1] \"18000s (~5 hours)\"  \"36000s (~10 hours)\" # Expected  x <- c(lubridate::dhours(-49), lubridate::dhours(-24)) y <- c(hms::parse_hm(\"24:00\"), - hms::parse_hm(\"06:00\")) vct_sum_time(x, y, cycle = lubridate::ddays(), reverse = FALSE) #> [1] \"-3600s (~-1 hours)\"  \"-21600s (~-6 hours)\" #> [1] \"-3600s (~-1 hours)\"  \"-21600s (~-6 hours)\" # Expected  x <- c(lubridate::dhours(-49), lubridate::dhours(-24)) y <- c(hms::parse_hm(\"24:00\"), - hms::parse_hm(\"06:00\")) vct_sum_time(x, y, cycle = lubridate::ddays(), reverse = TRUE) #> [1] \"82800s (~23 hours)\" \"64800s (~18 hours)\" #> [1] \"82800s (~23 hours)\" \"64800s (~18 hours)\" # Expected"},{"path":"https://danielvartan.github.io/lubritime/news/index.html","id":"lubritime-0009000","dir":"Changelog","previous_headings":"","what":"lubritime 0.0.0.9000","title":"lubritime 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
