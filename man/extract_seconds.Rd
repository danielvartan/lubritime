% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_seconds.R
\name{extract_seconds}
\alias{extract_seconds}
\alias{extract_seconds.Duration}
\alias{extract_seconds.difftime}
\alias{extract_seconds.POSIXt}
\alias{extract_seconds.Interval}
\title{Extract seconds from a time object}
\usage{
extract_seconds(x)

\method{extract_seconds}{Duration}(x)

\method{extract_seconds}{difftime}(x)

\method{extract_seconds}{POSIXt}(x)

\method{extract_seconds}{Interval}(x)
}
\arguments{
\item{x}{A \code{\link[base:numeric]{numeric}} vector.}
}
\value{
A \code{\link[base:numeric]{numeric}} vector.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#maturing}{\figure{lifecycle-maturing.svg}{options: alt='[Maturing]'}}}{\strong{[Maturing]}}

\code{extract_seconds()} extracts the seconds from a time object.
}
\details{
\subsection{\code{difftime} Objects}{

\code{\link[base:DateTimeClasses]{difftime}} objects are first converted to
\code{\link[hms:hms]{hms}}, which represent time in seconds. That way
there is no conflict with the \code{units} attribute.
}

\subsection{\code{Period} Objects}{

\code{\link[lubridate:period]{Period}} objects are a special type of object
developed by the \link[lubridate:lubridate-package]{lubridate} team that
represents "human units", ignoring possible timeline irregularities. This
means that 1 day as a \code{Period} can have different time spans when considering
timeline irregularities.

Since the time span of a \code{\link[lubridate:period]{Period}} object can
fluctuate, \code{extract_seconds()} does not accept this type of
object. You can transform it to a \code{\link[lubridate:duration]{Duration}} object
and still use the function, but be aware that this can produce errors.
}

\subsection{\code{POSIXt} Objects}{

\code{\link[base:DateTimeClasses]{POSIXt}} objects are converted to
\code{\link[hms:hms]{hms}}, stripping away the date component and retaining only the
time.
}

\subsection{\code{Interval} Objects}{

For \code{\link[lubridate:interval]{Interval}} objects the function extracts only
the duration of the time span.
}
}
\examples{
extract_seconds(lubridate::ddays(1))
#> [1] 86400 # Expected

extract_seconds(lubridate::as.difftime(1, units = "hours"))
#> [1] 3600 # Expected

extract_seconds(hms::as_hms("01:00:00"))
#> [1] 3600 # Expected

extract_seconds(lubridate::as_datetime("2020-01-01 00:00:00"))
#> [1] 0 # Expected

extract_seconds(
  lubridate::interval(
    start = lubridate::as_datetime("2020-01-01 00:00:00"),
    end = lubridate::as_datetime("2021-01-01 00:00:00")
  )
)
#> [1] 31622400 # Expected
}
\seealso{
Other utility functions: 
\code{\link{change_date}()},
\code{\link{fix_hms}()},
\code{\link{flat_posixt_date}()},
\code{\link{get_last_week}()},
\code{\link{round_time}()}
}
\concept{utility functions}
