% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/link_to_timeline.R
\name{link_to_timeline}
\alias{link_to_timeline}
\title{Link local times to a timeline}
\usage{
link_to_timeline(x, threshold = hms::parse_hms("12:00:00"))
}
\arguments{
\item{x}{An \code{\link[hms:hms]{hms}} or \code{\link[base:as.POSIXlt]{POSIXt}} object.}

\item{threshold}{An \code{\link[hms:hms]{hms}} object representing the threshold
time (default: \code{hms::parse_hms("12:00:00")}).}
}
\value{
An \code{\link[base:as.POSIXlt]{POSIXt}} object with the same time as \code{x},
but linked to a timeline based on the \code{threshold} time and the
\href{https://en.wikipedia.org/wiki/Unix_time}{Unix epoch}. See the Details
section for more information.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#maturing}{\figure{lifecycle-maturing.svg}{options: alt='[Maturing]'}}}{\strong{[Maturing]}}

\code{link_to_timeline()} is a function that links local times onto a two-day
timeline based on a specified threshold time.

This function is particularly useful for time arithmetic when dealing with
circular time representations. For information about circular time
representations, see \code{\link[=cycle_time]{cycle_time()}} Details
section.
}
\details{
\code{link_to_timeline()} will link local times onto a two-day timeline based on
the \code{threshold} time and the
\href{https://en.wikipedia.org/wiki/Unix_time}{Unix epoch} (\code{1970-01-01}).
If the threshold time is \code{12:00:00}, for example, all times \strong{before} this
threshold will be linked \emph{on the day after the Unix epoch} (\code{1970-01-02}) and
all times \strong{after} this threshold will be linked \emph{to the Unix epoch}
(\code{1970-01-01}).

The exception is when all times are before the threshold. In this case, the
function will just return all times linked to the Unix epoch (\code{1970-01-01}).

Please note that the Unix Epoch is the origin of time for the \code{POSIXct}
class. This means that
\code{as.POSIXct("1970-01-01 00:00:00", tz = "UTC") |> as.numeric()}
is equal to \code{0}. Learn more about the \code{POSIXct} class in
\link[base:as.POSIXlt]{as.POSIXct()}.
}
\examples{
## Scalar Example (Always on `1970-01-01`)

hms::parse_hm("18:00") |>
  link_to_timeline(threshold = hms::parse_hms("12:00:00"))
#> [1] "1970-01-01 18:00:00 UTC" # Expected

as.POSIXct("2020-01-01 05:00:00", tz = "UTC") |>
  link_to_timeline(threshold = hms::parse_hms("12:00:00"))
#> [1] "1970-01-01 05:00:00 UTC" # Expected

## Vector Example

c(hms::parse_hm("18:00"), hms::parse_hm("06:00")) |>
  link_to_timeline(threshold = hms::parse_hms("12:00:00"))
#> [1] "1970-01-01 18:00:00 UTC" "1970-01-02 06:00:00 UTC" # Expected

c(as.POSIXct("2020-01-01 20:00:00", tz = "UTC"),
  as.POSIXct("2020-01-01 05:00:00", tz = "UTC")) |>
  link_to_timeline()
#> [1] "1970-01-01 20:00:00 UTC" "1970-01-02 05:00:00 UTC" # Expected

## Using a Different Threshold

c(as.POSIXct("2020-01-01 20:00:00", tz = "UTC"),
  as.POSIXct("2020-01-01 01:00:00", tz = "UTC")) |>
  link_to_timeline(threshold = hms::parse_hms("02:00:00"))
#> [1] "1970-01-01 20:00:00 UTC" "1970-01-02 01:00:00 UTC" # Expected

c(hms::parse_hm("06:00"), hms::parse_hm("18:00")) |>
  link_to_timeline(threshold = hms::parse_hms("02:00:00"))
#> [1] "1970-01-01 06:00:00 UTC" "1970-01-01 18:00:00 UTC" # Expected

## With All Values Below or Above the Threshold
## (Returns on day one (`1970-01-01`))

c(hms::parse_hm("03:00"), hms::parse_hm("06:00")) |>
  link_to_timeline(threshold = hms::parse_hms("12:00:00"))
#> [1] "1970-01-01 03:00:00 UTC" "1970-01-01 06:00:00 UTC" # Expected

c(hms::parse_hm("06:00"), hms::parse_hm("18:00")) |>
  link_to_timeline(threshold = hms::parse_hms("02:00:00"))
#> [1] "1970-01-01 06:00:00 UTC" "1970-01-01 18:00:00 UTC" # Expected

## Doing Time Arithmetic

#                8h        (Day 1)         8h
# <----|-----------------------|-----------------------|----->
#    06:00                   14:00                   22:00h

c(hms::parse_hm("06:00"), hms::parse_hm("22:00")) |>
  mean() |>
  hms::as_hms()
#> 14:00:00 # Expected

#   (Day 1)        4h                    4h         (Day 2)
# <----|-----------------------|-----------------------|----->
#    22:00                   02:00                   06:00h

c(hms::parse_hm("22:00"), hms::parse_hm("06:00")) |>
  link_to_timeline(threshold = hms::parse_hms("12:00:00")) |>
  mean() |>
  hms::as_hms()
#> 02:00:00 # Expected
}
\seealso{
Other circular time functions: 
\code{\link{assign_date}()},
\code{\link{cycle_time}()},
\code{\link{shorter_int}()}
}
\concept{circular time functions}
